'use client';

import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import HorizontalLayout from '@/components/layout/HorizontalLayout';
import {
  Card,
  Row,
  Col,
  Statistic,
  Table,
  Select,
  Button,
  Space,
  Typography,
  Tag,
  Progress,
  Breadcrumb,
  Tabs,
  Input,
  Badge
} from 'antd';
import {
  BankOutlined,
  TrophyOutlined,
  RiseOutlined,
  FallOutlined,
  SearchOutlined,
  DownloadOutlined,
  PrinterOutlined,
  HomeOutlined,
  BarChartOutlined,
  TeamOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

const { Title, Text } = Typography;
const { Option } = Select;
const { TabPane } = Tabs;

interface SchoolComparison {
  id: number;
  school_name: string;
  district: string;
  province: string;
  total_students: number;
  total_teachers: number;
  average_baseline: number;
  average_midline: number;
  average_endline: number;
  improvement_rate: number;
  performance_rank: number;
  subjects: {
    math_avg: number;
    khmer_avg: number;
  };
  status: 'excellent' | 'good' | 'average' | 'needs_support';
}

export default function SchoolComparisonPage() {
  const { data: session } = useSession();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState('');
  const [selectedProvince, setSelectedProvince] = useState('');
  const [selectedDistrict, setSelectedDistrict] = useState('');
  const [sortBy, setSortBy] = useState('performance_rank');

  // Mock data for school comparison
  const [schoolData, setSchoolData] = useState<SchoolComparison[]>([
    {
      id: 1,
      school_name: '·ûü·û∂·ûõ·û∂·ûî·ûã·ûò·ûü·û∑·ûÄ·üí·ûü·û∂·ûó·üí·ûì·üÜ·ûñ·üÅ·ûâ',
      district: '·ûä·ûº·ûì·ûñ·üÅ·ûâ',
      province: '·ûó·üí·ûì·üÜ·ûñ·üÅ·ûâ',
      total_students: 245,
      total_teachers: 12,
      average_baseline: 52.3,
      average_midline: 68.7,
      average_endline: 78.4,
      improvement_rate: 49.9,
      performance_rank: 1,
      subjects: {
        math_avg: 76.2,
        khmer_avg: 80.6
      },
      status: 'excellent'
    },
    {
      id: 2,
      school_name: '·ûü·û∂·ûõ·û∂·ûî·ûã·ûò·ûü·û∑·ûÄ·üí·ûü·û∂·ûÄ·üÜ·ûñ·ûè',
      district: '·ûÄ·üÜ·ûñ·ûè',
      province: '·ûÄ·üÜ·ûñ·ûè',
      total_students: 189,
      total_teachers: 8,
      average_baseline: 48.7,
      average_midline: 62.1,
      average_endline: 72.3,
      improvement_rate: 48.5,
      performance_rank: 2,
      subjects: {
        math_avg: 70.1,
        khmer_avg: 74.5
      },
      status: 'excellent'
    },
    {
      id: 3,
      school_name: '·ûü·û∂·ûõ·û∂·ûî·ûã·ûò·ûü·û∑·ûÄ·üí·ûü·û∂·ûü·üÄ·ûò·ûö·û∂·ûî',
      district: '·ûü·üÄ·ûò·ûö·û∂·ûî',
      province: '·ûü·üÄ·ûò·ûö·û∂·ûî',
      total_students: 312,
      total_teachers: 15,
      average_baseline: 45.2,
      average_midline: 58.9,
      average_endline: 68.7,
      improvement_rate: 52.0,
      performance_rank: 3,
      subjects: {
        math_avg: 65.4,
        khmer_avg: 71.9
      },
      status: 'good'
    },
    {
      id: 4,
      school_name: '·ûü·û∂·ûõ·û∂·ûî·ûã·ûò·ûü·û∑·ûÄ·üí·ûü·û∂·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ',
      district: '·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ',
      province: '·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ',
      total_students: 178,
      total_teachers: 9,
      average_baseline: 41.8,
      average_midline: 53.2,
      average_endline: 61.7,
      improvement_rate: 47.6,
      performance_rank: 4,
      subjects: {
        math_avg: 58.9,
        khmer_avg: 64.5
      },
      status: 'average'
    },
    {
      id: 5,
      school_name: '·ûü·û∂·ûõ·û∂·ûî·ûã·ûò·ûü·û∑·ûÄ·üí·ûü·û∂·ûÄ·ûé·üí·ûè·û∂·ûõ',
      district: '·ûÄ·ûé·üí·ûè·û∂·ûõ',
      province: '·ûÄ·ûé·üí·ûè·û∂·ûõ',
      total_students: 156,
      total_teachers: 7,
      average_baseline: 39.4,
      average_midline: 48.1,
      average_endline: 55.3,
      improvement_rate: 40.4,
      performance_rank: 5,
      subjects: {
        math_avg: 52.7,
        khmer_avg: 57.9
      },
      status: 'needs_support'
    }
  ]);

  // Overall statistics
  const [stats, setStats] = useState({
    totalSchools: 24,
    averageImprovement: 47.7,
    topPerformers: 8,
    needsSupport: 3
  });

  const getStatusColor = (status: string) => {
    const colors = {
      excellent: 'green',
      good: 'blue',
      average: 'orange',
      needs_support: 'red'
    };
    return colors[status as keyof typeof colors] || 'default';
  };

  const getStatusText = (status: string) => {
    const texts = {
      excellent: '·ûõ·üí·û¢·ûî·üÜ·ûï·ûª·ûè',
      good: '·ûõ·üí·û¢',
      average: '·ûò·ûí·üí·ûô·ûò',
      needs_support: '·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô'
    };
    return texts[status as keyof typeof texts] || status;
  };

  const getRankBadge = (rank: number) => {
    if (rank === 1) return <Badge count="ü•á" style={{ backgroundColor: '#gold' }} />;
    if (rank === 2) return <Badge count="ü•à" style={{ backgroundColor: '#silver' }} />;
    if (rank === 3) return <Badge count="ü•â" style={{ backgroundColor: '#bronze' }} />;
    return <Badge count={rank} style={{ backgroundColor: '#87d068' }} />;
  };

  const columns: ColumnsType<SchoolComparison> = [
    {
      title: '·ûÖ·üÜ·ûé·û∂·ûè·üã·ûê·üí·ûì·û∂·ûÄ·üã',
      dataIndex: 'performance_rank',
      key: 'performance_rank',
      width: 80,
      align: 'center',
      render: (rank: number) => getRankBadge(rank),
      sorter: (a, b) => a.performance_rank - b.performance_rank,
    },
    {
      title: '·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì',
      dataIndex: 'school_name',
      key: 'school_name',
      render: (text: string, record) => (
        <Space direction="vertical" size="small">
          <Space>
            <BankOutlined style={{ color: '#1890ff' }} />
            <Text strong>{text}</Text>
          </Space>
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {record.district}, {record.province}
          </Text>
        </Space>
      ),
    },
    {
      title: '·ûü·û∑·ûü·üí·ûü/·ûÇ·üí·ûö·ûº',
      key: 'student_teacher',
      render: (_, record) => (
        <Space direction="vertical" size="small">
          <Text style={{ fontSize: '13px' }}>
            <TeamOutlined /> {record.total_students} ·ûü·û∑·ûü·üí·ûü
          </Text>
          <Text style={{ fontSize: '13px' }}>
            <TrophyOutlined /> {record.total_teachers} ·ûÇ·üí·ûö·ûº
          </Text>
        </Space>
      ),
    },
    {
      title: '·ûñ·û∑·ûì·üí·ûë·ûª·ûä·üÜ·ûî·ûº·ûÑ',
      dataIndex: 'average_baseline',
      key: 'average_baseline',
      align: 'center',
      render: (score: number) => (
        <Tag color={score < 50 ? 'red' : score < 70 ? 'orange' : 'green'}>
          {score.toFixed(1)}%
        </Tag>
      ),
      sorter: (a, b) => a.average_baseline - b.average_baseline,
    },
    {
      title: '·ûñ·û∑·ûì·üí·ûë·ûª·ûÄ·ûé·üí·ûè·û∂·ûõ',
      dataIndex: 'average_midline',
      key: 'average_midline',
      align: 'center',
      render: (score: number) => (
        <Tag color={score < 50 ? 'red' : score < 70 ? 'orange' : 'green'}>
          {score.toFixed(1)}%
        </Tag>
      ),
      sorter: (a, b) => a.average_midline - b.average_midline,
    },
    {
      title: '·ûñ·û∑·ûì·üí·ûë·ûª·ûÖ·ûª·ûÑ·ûÄ·üí·ûö·üÑ·ûô',
      dataIndex: 'average_endline',
      key: 'average_endline',
      align: 'center',
      render: (score: number) => (
        <Tag color={score < 50 ? 'red' : score < 70 ? 'orange' : 'green'}>
          {score.toFixed(1)}%
        </Tag>
      ),
      sorter: (a, b) => a.average_endline - b.average_endline,
    },
    {
      title: '·ûÄ·û∂·ûö·ûÄ·üÇ·ûõ·ûò·üí·û¢',
      dataIndex: 'improvement_rate',
      key: 'improvement_rate',
      align: 'center',
      render: (rate: number) => (
        <Space direction="vertical" size="small">
          <Progress 
            percent={Math.min(rate, 100)} 
            size="small"
            strokeColor={rate > 45 ? '#52c41a' : rate > 30 ? '#faad14' : '#f5222d'}
          />
          <Space>
            {rate > 40 ? <RiseOutlined style={{ color: '#52c41a' }} /> : <FallOutlined style={{ color: '#f5222d' }} />}
            <Text style={{ fontSize: '11px' }}>+{rate.toFixed(1)}%</Text>
          </Space>
        </Space>
      ),
      sorter: (a, b) => a.improvement_rate - b.improvement_rate,
    },
    {
      title: '·ûò·ûª·ûÅ·ûú·û∑·ûá·üí·ûá·û∂',
      key: 'subjects',
      render: (_, record) => (
        <Space direction="vertical" size="small">
          <Text style={{ fontSize: '12px' }}>
            ·ûÇ·ûé·û∑·ûè: <Tag size="small" color="blue">{record.subjects.math_avg.toFixed(1)}%</Tag>
          </Text>
          <Text style={{ fontSize: '12px' }}>
            ·ûÅ·üí·ûò·üÇ·ûö: <Tag size="small" color="green">{record.subjects.khmer_avg.toFixed(1)}%</Tag>
          </Text>
        </Space>
      ),
    },
    {
      title: '·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={getStatusColor(status)}>
          {getStatusText(status)}
        </Tag>
      ),
    }
  ];

  const filteredData = schoolData.filter(item => {
    const matchesSearch = item.school_name.toLowerCase().includes(searchText.toLowerCase()) ||
                         item.district.toLowerCase().includes(searchText.toLowerCase());
    const matchesProvince = !selectedProvince || item.province === selectedProvince;
    const matchesDistrict = !selectedDistrict || item.district === selectedDistrict;
    
    return matchesSearch && matchesProvince && matchesDistrict;
  });

  return (
    <HorizontalLayout>
      <div className="max-w-full overflow-x-hidden">
        {/* Breadcrumb */}
        <Breadcrumb style={{ marginBottom: '16px' }}>
          <Breadcrumb.Item>
            <HomeOutlined /> ·ûë·üÜ·ûñ·üê·ûö·ûä·ûæ·ûò
          </Breadcrumb.Item>
          <Breadcrumb.Item>
            <BarChartOutlined /> ·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç
          </Breadcrumb.Item>
          <Breadcrumb.Item>
            ·ûî·üí·ûö·üÄ·ûî·ûí·üÄ·ûî·ûü·û∂·ûõ·û∂
          </Breadcrumb.Item>
        </Breadcrumb>

        {/* Page Header */}
        <div className="mb-6">
          <Title level={2}>·ûî·üí·ûö·üÄ·ûî·ûí·üÄ·ûî·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì</Title>
          <Text type="secondary">·ûî·üí·ûö·üÄ·ûî·ûí·üÄ·ûî·ûõ·ûë·üí·ûí·ûï·ûõ·ûö·ûú·û∂·ûÑ·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã ·ûì·û∑·ûÑ·ûÄ·û∂·ûö·ûú·û∑·ûú·ûè·üí·ûè·ûö·ûî·ûü·üã·ûñ·ûΩ·ûÄ·ûÇ·üÅ</Text>
        </div>

        {/* Statistics Cards */}
        <Row gutter={16} className="mb-6">
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì·ûü·ûö·ûª·ûî"
                value={stats.totalSchools}
                prefix={<BankOutlined style={{ color: '#1890ff' }} />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="·ûÄ·û∂·ûö·ûÄ·üÇ·ûõ·ûò·üí·û¢·ûò·ûí·üí·ûô·ûò"
                value={stats.averageImprovement}
                suffix="%"
                prefix={<RiseOutlined style={{ color: '#52c41a' }} />}
                valueStyle={{ color: '#52c41a' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="·ûü·û∂·ûõ·û∂·ûõ·üí·û¢·ûî·üÜ·ûï·ûª·ûè"
                value={stats.topPerformers}
                prefix={<TrophyOutlined style={{ color: '#faad14' }} />}
                valueStyle={{ color: '#faad14' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Card>
              <Statistic
                title="·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô"
                value={stats.needsSupport}
                prefix={<TeamOutlined style={{ color: '#f5222d' }} />}
                valueStyle={{ color: '#f5222d' }}
              />
            </Card>
          </Col>
        </Row>

        {/* Filters */}
        <Card className="mb-6">
          <Row gutter={16} align="middle">
            <Col xs={24} sm={12} md={6}>
              <Input
                placeholder="·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì..."
                prefix={<SearchOutlined />}
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                allowClear
              />
            </Col>
            <Col xs={24} sm={12} md={4}>
              <Select
                placeholder="·ûÅ·üÅ·ûè·üí·ûè"
                style={{ width: '100%' }}
                value={selectedProvince}
                onChange={setSelectedProvince}
                allowClear
              >
                <Option value="·ûó·üí·ûì·üÜ·ûñ·üÅ·ûâ">·ûó·üí·ûì·üÜ·ûñ·üÅ·ûâ</Option>
                <Option value="·ûÄ·üÜ·ûñ·ûè">·ûÄ·üÜ·ûñ·ûè</Option>
                <Option value="·ûü·üÄ·ûò·ûö·û∂·ûî">·ûü·üÄ·ûò·ûö·û∂·ûî</Option>
                <Option value="·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ">·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ</Option>
                <Option value="·ûÄ·ûé·üí·ûè·û∂·ûõ">·ûÄ·ûé·üí·ûè·û∂·ûõ</Option>
              </Select>
            </Col>
            <Col xs={24} sm={12} md={4}>
              <Select
                placeholder="·ûü·üí·ûö·ûª·ûÄ"
                style={{ width: '100%' }}
                value={selectedDistrict}
                onChange={setSelectedDistrict}
                allowClear
              >
                <Option value="·ûä·ûº·ûì·ûñ·üÅ·ûâ">·ûä·ûº·ûì·ûñ·üÅ·ûâ</Option>
                <Option value="·ûÄ·üÜ·ûñ·ûè">·ûÄ·üÜ·ûñ·ûè</Option>
                <Option value="·ûü·üÄ·ûò·ûö·û∂·ûî">·ûü·üÄ·ûò·ûö·û∂·ûî</Option>
                <Option value="·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ">·ûî·û∂·ûè·üã·ûä·üÜ·ûî·ûÑ</Option>
                <Option value="·ûÄ·ûé·üí·ûè·û∂·ûõ">·ûÄ·ûé·üí·ûè·û∂·ûõ</Option>
              </Select>
            </Col>
            <Col xs={24} sm={12} md={4}>
              <Select
                placeholder="·ûè·ûò·üí·ûö·üÄ·ûî·ûè·û∂·ûò"
                style={{ width: '100%' }}
                value={sortBy}
                onChange={setSortBy}
              >
                <Option value="performance_rank">·ûÖ·üÜ·ûé·û∂·ûè·üã·ûê·üí·ûì·û∂·ûÄ·üã</Option>
                <Option value="improvement_rate">·ûÄ·û∂·ûö·ûÄ·üÇ·ûõ·ûò·üí·û¢</Option>
                <Option value="average_endline">·ûñ·û∑·ûì·üí·ûë·ûª·ûÖ·ûª·ûÑ·ûÄ·üí·ûö·üÑ·ûô</Option>
                <Option value="total_students">·ûÖ·üÜ·ûì·ûΩ·ûì·ûü·û∑·ûü·üí·ûü</Option>
              </Select>
            </Col>
            <Col xs={24} sm={12} md={6}>
              <Space>
                <Button icon={<DownloadOutlined />}>·ûë·û∂·ûâ·ûô·ûÄ</Button>
                <Button icon={<PrinterOutlined />} onClick={() => window.print()}>·ûî·üÑ·üá·ûñ·ûª·ûò·üí·ûñ</Button>
              </Space>
            </Col>
          </Row>
        </Card>

        {/* Comparison Table */}
        <Card>
          <Tabs defaultActiveKey="comparison">
            <TabPane tab="·ûî·üí·ûö·üÄ·ûî·ûí·üÄ·ûî·ûõ·ûò·üí·û¢·û∑·ûè" key="comparison">
              <Table
                columns={columns}
                dataSource={filteredData}
                rowKey="id"
                loading={loading}
                scroll={{ x: 'max-content' }}
                pagination={{
                  total: filteredData.length,
                  pageSize: 10,
                  showSizeChanger: true,
                  showQuickJumper: true,
                  showTotal: (total, range) => 
                    `${range[0]}-${range[1]} ·ûñ·û∏ ${total} ·ûü·û∂·ûõ·û∂·ûö·üÄ·ûì`,
                }}
              />
            </TabPane>
            <TabPane tab="·ûü·ûÑ·üí·ûÅ·üÅ·ûî·ûè·û∂·ûò·ûÅ·üÅ·ûè·üí·ûè" key="province-summary">
              <div className="p-4">
                <Row gutter={16}>
                  <Col xs={24} sm={12} md={8}>
                    <Card size="small">
                      <Statistic
                        title="·ûó·üí·ûì·üÜ·ûñ·üÅ·ûâ - ·ûñ·û∑·ûì·üí·ûë·ûª·ûò·ûí·üí·ûô·ûò"
                        value={78.4}
                        suffix="%"
                        valueStyle={{ color: '#52c41a' }}
                      />
                    </Card>
                  </Col>
                  <Col xs={24} sm={12} md={8}>
                    <Card size="small">
                      <Statistic
                        title="·ûÄ·üÜ·ûñ·ûè - ·ûñ·û∑·ûì·üí·ûë·ûª·ûò·ûí·üí·ûô·ûò"
                        value={72.3}
                        suffix="%"
                        valueStyle={{ color: '#1890ff' }}
                      />
                    </Card>
                  </Col>
                  <Col xs={24} sm={12} md={8}>
                    <Card size="small">
                      <Statistic
                        title="·ûü·üÄ·ûò·ûö·û∂·ûî - ·ûñ·û∑·ûì·üí·ûë·ûª·ûò·ûí·üí·ûô·ûò"
                        value={68.7}
                        suffix="%"
                        valueStyle={{ color: '#faad14' }}
                      />
                    </Card>
                  </Col>
                </Row>
              </div>
            </TabPane>
          </Tabs>
        </Card>
      </div>
    </HorizontalLayout>
  );
}